/**
 * This is an auto generated code. This code should not be modified since the file can be overwritten
 * if new genezio commands are executed.
 */
import { Remote } from "genezio-remote";
import { UserLoginResponse, User, UpdateUserDetailsInput } from "./models/UserTypes";
export interface Storage {
    setItem(key: string, value: string): void;
    getItem(key: string): string | null;
    removeItem(key: string): void;
    clear(): void;
}
export declare class LocalStorageWrapper implements Storage {
    setItem(key: string, value: string): void;
    getItem(key: string): string | null;
    removeItem(key: string): void;
    clear(): void;
}
export declare class AuthService {
    private static notInitializedErrorMessage;
    private static notLoggedInErrorMessage;
    private static instance;
    private remote;
    private storage;
    private serverSide;
    /**
     * @method getInstance
     * @description Method that returns an instance of the AuthService class. This method should be used instead of the constructor.
     * @returns {AuthService} An instance of the AuthService class.
     */
    static getInstance(): AuthService;
    /**
     * @method setServerSide
     * @description Method that sets the serverSide value that will be used determine if the request is coming from the server or from the client.
     * @param {Storage} serverSide - The boolean that will be used determine if the request is coming from the server or from the client.
     * @returns {void}
     */
    setServerSide(serverSide: boolean): void;
    /**
     * @method setStorage
     * @description Method that sets the storage that will be used to store the token.
     * @param {Storage} storage - The storage that will be used to store the token.
     * @returns {void}
     */
    setStorage(storage: Storage): void;
    /**
     * @method setTokenAndRegion
     * @description Method that should be called before any other method. This method sets the token and region
     * that will be used to call the remote functions.
     * @param {string} token - The token provided in genezio dashboard.
     * @param {string} region - The region provided in genezio dashboard.
     * @returns {void}
     * @example
     * AuthService.getInstance().setTokenAndRegion("0-1234567890", "us-east-1")
     */
    setTokenAndRegion(token: string, region: string): void;
    /**
     * @method register
     * @description Method that can be used to create a new user.
     *
     * @param {string} email The user's email.
     * @param {string} password The user's password.
     * @param {string} name The user's name. Optional.
     * @param {string} profilePictureUrl The user's profile picture URL. Optional.
     * @param {Object} customInfo An object containing custom information about the user. Optional.
     *
     * @returns {Promise<UserLoginResponse>} An object containing the user's information.
     * @throws {ErrorCode.MISSING_EMAIL_PARAMETER} If no email was provided.
     * @throws {ErrorCode.MISSING_PASSWORD_PARAMETER} If no password was provided.
     * @throws {ErrorCode.PASSWORD_TOO_SHORT} If the password is too short.
     * @throws {ErrorCode.PASSWORD_CONTAINS_ONLY_NUMBERS} If the password contains only numbers.
     * @throws {ErrorCode.PASSWORD_MUST_HAVE_AT_LEAST_ONE_SPECIAL_CHARACTER} If the password does not contain any special characters.
     * @throws {ErrorCode.PASSWORD_MUST_HAVE_AT_LEAST_ONE_UPPERCASE_LETTER} If the password does not contain any uppercase letters.
     * @throws {ErrorCode.INTERNAL_INCORRECT_CONFIGURATION} If the AuthService class was not properly configured.
     * @throws {ErrorCode.EMAIL_ALREADY_EXISTS} If the email is already in use.
     * @throws {ErrorCode.MAIL_NOT_SENT} If the email could not be sent.
     * @throws {Error} If an unexpected error occurs.
     * */
    register(email: string, password: string, name?: string, profilePictureUrl?: string, customInfo?: {
        [key: string]: string;
    }): Promise<UserLoginResponse>;
    /**
     * @method login
     * @description Method that can be used to obtain a login token for a giving user.
     *
     * @param {string} email The user's email.
     * @param {string} password The user's password.
     * @returns {Promise<UserLoginResponse>} An object containing the user's information and the token.
     * @throws {ErrorCode.INTERNAL_INCORRECT_CONFIGURATION} If the AuthService class was not properly configured.
     * @throws {ErrorCode.MISSING_EMAIL_PARAMETER} If no email was provided.
     * @throws {ErrorCode.INCORRECT_EMAIL_OR_PASSWORD} If the email or password is incorrect.
     * @throws {ErrorCode.EMAIL_NOT_VERIFIED} If the email is not confirmed.
     * @throws {Error} If an unexpected error occurs.
     * */
    login(email: string, password: string): Promise<UserLoginResponse>;
    /**
     * @method resetPassword
     * @description Sends a password reset token to a user's email.
     * @param {string} email - The user's email address.
     * @returns void. If the method did not throw, the operation was successful.
     * @throws {ErrorCode.INTERNAL_INCORRECT_CONFIGURATION} If the AuthService class was not properly configured.
     * @throws {ErrorCode.MISSING_EMAIL_PARAMETER} If no email was provided.
     * @throws {Error} If an unexpected error occurs.
     */
    resetPassword(email: string): Promise<void>;
    /**
     * @method updateUserDetails
     * @description Updates the user's details.
     * @param {UpdateUserDetailsInput} input - An object containing the user's new details.
     * @returns {Promise<User>} An object containing the user's information.
     */
    updateUserDetails(input: UpdateUserDetailsInput): Promise<User>;
    /**
     * @method emailConfirmation
     * @description Confirms the user's email address. This method should be called after the user clicks on the link
     * received in the email.
     * @param {string} token - The token received in the email.
     * @returns void. If the method did not throw, the operation was successful.
     * @throws {ErrorCode.INTERNAL_INCORRECT_CONFIGURATION} If the AuthService class was not properly configured.
     * @throws {ErrorCode.INVALID_TOKEN} If the token is invalid.
     * @throws {Error} If an unexpected error occurs.
     */
    emailConfirmation(token: string): Promise<void>;
    /**
     * @method resendEmailConfirmation
     * @description Resends the email confirmation email to the user.
     * @param {string} email
     * @returns void. If the method did not throw, the operation was successful.
     * @throws {ErrorCode.INTERNAL_INCORRECT_CONFIGURATION} If no email was provided.
     * @throws {ErrorCode.MAIL_NOT_SENT} If the email could not be sent.
     * @throws {Error} If an unexpected error occurs.
     */
    resendEmailConfirmation(email: string): Promise<void>;
    /**
     * @method resetPasswordConfirmation
     * @description Confirms the user's new password. This method should be called after the user clicks on the link
     * received in the email.
     * @param {string} token - The token received in the email.
     * @param {string} password - The new password.
     * @returns void. If the method did not throw, the operation was successful.
     * @throws {ErrorCode.INTERNAL_INCORRECT_CONFIGURATION} If the AuthService class was not properly configured.
     * @throws {ErrorCode.INVALID_TOKEN} If the token is invalid.
     * @throws {ErrorCode.PASSWORD_TOO_SHORT} If the password is too short.
     * @throws {ErrorCode.PASSWORD_CONTAINS_ONLY_NUMBERS} If the password contains only numbers.
     * @throws {ErrorCode.PASSWORD_MUST_HAVE_AT_LEAST_ONE_SPECIAL_CHARACTER} If the password does not contain any special characters.
     * @throws {ErrorCode.PASSWORD_MUST_HAVE_AT_LEAST_ONE_UPPERCASE_LETTER} If the password does not contain any uppercase letters.
     * @throws {Error} If an unexpected error occurs.
     */
    resetPasswordConfirmation(token: string, password: string): Promise<void>;
    /**
     * @method googleRegistration
     * @description Method that can be used to obtain a login token for a giving user.
     *
     * @param {string} googleToken The user's Google token.
     * @returns {Promise<UserLoginResponse>} An object containing the user's information and the token.
     * @throws {ErrorCode.INVALID_TOKEN} If the Google token is incorrect.
     * @throws {Error} If an unexpected error occurs.
     */
    googleRegistration(googleToken: string): Promise<UserLoginResponse>;
    /**
     * @method userInfo
     * @description Method that can be used to obtain information about the user. It uses the token retrieved from storage.
     * @returns {Promise<User>} An object containing the user's information.
     * @throws {ErrorCode.INTERNAL_INCORRECT_CONFIGURATION} If the AuthService class was not properly configured.
     * @throws {GenezioErrorCodes.Unauthorized} If the user is not authorized.
     * @throws {Error} If an unexpected error occurs.
     */
    userInfo(): Promise<User>;
    /**
     * @method userInfoForToken
     * @description Method that can be used to obtain information about the user.
     * @param {string} token The user's token.
     * @returns {Promise<User>} An object containing the user's information.
     * @throws {GenezioErrorCodes.Unauthorized} If the user is not authorized.
     * @throws {Error} If an unexpected error occurs.
     */
    userInfoForToken(token: string): Promise<User>;
    /**
     * @method logout
     * @description Method that can be used to logout the user. It removes the token from storage.
     * @returns void. If the method did not throw, the operation was successful.
     * @throws {ErrorCode.INTERNAL_INCORRECT_CONFIGURATION} If the AuthService class was not properly configured.
     * @throws {Error} If an unexpected error occurs.
     */
    logout(): Promise<void>;
    /**
     * @method web3GetNonce
     * @description Method that can be used to obtain a nonce for a giving user.
     *
     * @param {string} address The user's address.
     * @returns {Promise<string>} A nonce.
     * @throws {ErrorCode.INTERNAL_INCORRECT_CONFIGURATION} If the AuthService class was not properly configured.
     * @throws {Error} If an unexpected error occurs.
     */
    web3GetNonce(address: string): Promise<string>;
    /**
      * @method web3Login
      * @description Method that can be used to obtain a login token for a giving user.
      * @param {string} address The user's address.
      * @param {string} signature The signature of the nonce.
      * @returns {Promise<UserLoginResponse>} An object containing the user's information and the token.
      */
    web3Login(address: string, signature: string): Promise<UserLoginResponse>;
}
export { Remote };
