"use strict";
/**
 * This is an auto generated code. This code should not be modified since the file can be overwritten
 * if new genezio commands are executed.
 */
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __generator = (this && this.__generator) || function (thisArg, body) {
    var _ = { label: 0, sent: function() { if (t[0] & 1) throw t[1]; return t[1]; }, trys: [], ops: [] }, f, y, t, g;
    return g = { next: verb(0), "throw": verb(1), "return": verb(2) }, typeof Symbol === "function" && (g[Symbol.iterator] = function() { return this; }), g;
    function verb(n) { return function (v) { return step([n, v]); }; }
    function step(op) {
        if (f) throw new TypeError("Generator is already executing.");
        while (g && (g = 0, op[0] && (_ = 0)), _) try {
            if (f = 1, y && (t = op[0] & 2 ? y["return"] : op[0] ? y["throw"] || ((t = y["return"]) && t.call(y), 0) : y.next) && !(t = t.call(y, op[1])).done) return t;
            if (y = 0, t) op = [op[0] & 2, t.value];
            switch (op[0]) {
                case 0: case 1: t = op; break;
                case 4: _.label++; return { value: op[1], done: false };
                case 5: _.label++; y = op[1]; op = [0]; continue;
                case 7: op = _.ops.pop(); _.trys.pop(); continue;
                default:
                    if (!(t = _.trys, t = t.length > 0 && t[t.length - 1]) && (op[0] === 6 || op[0] === 2)) { _ = 0; continue; }
                    if (op[0] === 3 && (!t || (op[1] > t[0] && op[1] < t[3]))) { _.label = op[1]; break; }
                    if (op[0] === 6 && _.label < t[1]) { _.label = t[1]; t = op; break; }
                    if (t && _.label < t[2]) { _.label = t[2]; _.ops.push(op); break; }
                    if (t[2]) _.ops.pop();
                    _.trys.pop(); continue;
            }
            op = body.call(thisArg, _);
        } catch (e) { op = [6, e]; y = 0; } finally { f = t = 0; }
        if (op[0] & 5) throw op[1]; return { value: op[0] ? op[1] : void 0, done: true };
    }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Remote = exports.AuthService = exports.LocalStorageWrapper = void 0;
var genezio_remote_1 = require("genezio-remote");
Object.defineProperty(exports, "Remote", { enumerable: true, get: function () { return genezio_remote_1.Remote; } });
var LocalStorageWrapper = /** @class */ (function () {
    function LocalStorageWrapper() {
    }
    LocalStorageWrapper.prototype.setItem = function (key, value) {
        localStorage.setItem(key, value);
    };
    LocalStorageWrapper.prototype.getItem = function (key) {
        return localStorage.getItem(key);
    };
    LocalStorageWrapper.prototype.removeItem = function (key) {
        localStorage.removeItem(key);
    };
    LocalStorageWrapper.prototype.clear = function () {
        localStorage.clear();
    };
    return LocalStorageWrapper;
}());
exports.LocalStorageWrapper = LocalStorageWrapper;
var AuthService = /** @class */ (function () {
    function AuthService() {
        this.remote = null;
        this.storage = null;
        this.serverSide = false;
    }
    /**
     * @method getInstance
     * @description Method that returns an instance of the AuthService class. This method should be used instead of the constructor.
     * @returns {AuthService} An instance of the AuthService class.
     */
    AuthService.getInstance = function () {
        if (!this.instance) {
            this.instance = new AuthService();
            if (typeof process !== "undefined" &&
                process.env != null &&
                process.env.GNZ_AUTH_FUNCTION_URL != null) {
                var url = process.env.GNZ_AUTH_FUNCTION_URL;
                this.instance.remote = new genezio_remote_1.Remote(url);
            }
            this.instance.storage = new LocalStorageWrapper();
        }
        return this.instance;
    };
    /**
     * @method setServerSide
     * @description Method that sets the serverSide value that will be used determine if the request is coming from the server or from the client.
     * @param {Storage} serverSide - The boolean that will be used determine if the request is coming from the server or from the client.
     * @returns {void}
     */
    AuthService.prototype.setServerSide = function (serverSide) {
        this.serverSide = serverSide;
    };
    /**
     * @method setStorage
     * @description Method that sets the storage that will be used to store the token.
     * @param {Storage} storage - The storage that will be used to store the token.
     * @returns {void}
     */
    AuthService.prototype.setStorage = function (storage) {
        this.storage = storage;
    };
    /**
     * @method setTokenAndRegion
     * @description Method that should be called before any other method. This method sets the token and region
     * that will be used to call the remote functions.
     * @param {string} token - The token provided in genezio dashboard.
     * @param {string} region - The region provided in genezio dashboard.
     * @returns {void}
     * @example
     * AuthService.getInstance().setTokenAndRegion("0-1234567890", "us-east-1")
     */
    AuthService.prototype.setTokenAndRegion = function (token, region) {
        var _a = token.split("-"), cloud = _a[0], id = _a[1];
        var url;
        if (cloud === "0") {
            url = "https://".concat(id, ".lambda-url.").concat(region, ".on.aws/AuthService");
        }
        else if (cloud === "1") {
            url = "https://runtime.genez.io:8091/".concat(id);
        }
        else {
            throw new Error("Wrong token format. Check your token and try again");
        }
        this.remote = new genezio_remote_1.Remote(url);
    };
    /**
     * @method register
     * @description Method that can be used to create a new user.
     *
     * @param {string} email The user's email.
     * @param {string} password The user's password.
     * @param {string} name The user's name. Optional.
     * @param {string} profilePictureUrl The user's profile picture URL. Optional.
     * @param {Object} customInfo An object containing custom information about the user. Optional.
     *
     * @returns {Promise<UserLoginResponse>} An object containing the user's information.
     * @throws {ErrorCode.MISSING_EMAIL_PARAMETER} If no email was provided.
     * @throws {ErrorCode.MISSING_PASSWORD_PARAMETER} If no password was provided.
     * @throws {ErrorCode.PASSWORD_TOO_SHORT} If the password is too short.
     * @throws {ErrorCode.PASSWORD_CONTAINS_ONLY_NUMBERS} If the password contains only numbers.
     * @throws {ErrorCode.PASSWORD_MUST_HAVE_AT_LEAST_ONE_SPECIAL_CHARACTER} If the password does not contain any special characters.
     * @throws {ErrorCode.PASSWORD_MUST_HAVE_AT_LEAST_ONE_UPPERCASE_LETTER} If the password does not contain any uppercase letters.
     * @throws {ErrorCode.INTERNAL_INCORRECT_CONFIGURATION} If the AuthService class was not properly configured.
     * @throws {ErrorCode.EMAIL_ALREADY_EXISTS} If the email is already in use.
     * @throws {ErrorCode.MAIL_NOT_SENT} If the email could not be sent.
     * @throws {Error} If an unexpected error occurs.
     * */
    AuthService.prototype.register = function (email, password, name, profilePictureUrl, customInfo) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.remote) {
                            if (this.serverSide) {
                                throw new Error(AuthService.notLoggedInErrorMessage);
                            }
                            throw new Error(AuthService.notInitializedErrorMessage);
                        }
                        return [4 /*yield*/, this.remote.call("AuthService.register", email, password, name, profilePictureUrl, customInfo)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * @method login
     * @description Method that can be used to obtain a login token for a giving user.
     *
     * @param {string} email The user's email.
     * @param {string} password The user's password.
     * @returns {Promise<UserLoginResponse>} An object containing the user's information and the token.
     * @throws {ErrorCode.INTERNAL_INCORRECT_CONFIGURATION} If the AuthService class was not properly configured.
     * @throws {ErrorCode.MISSING_EMAIL_PARAMETER} If no email was provided.
     * @throws {ErrorCode.INCORRECT_EMAIL_OR_PASSWORD} If the email or password is incorrect.
     * @throws {ErrorCode.EMAIL_NOT_VERIFIED} If the email is not confirmed.
     * @throws {Error} If an unexpected error occurs.
     * */
    AuthService.prototype.login = function (email, password) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.remote || !this.storage) {
                            if (this.serverSide) {
                                throw new Error(AuthService.notLoggedInErrorMessage);
                            }
                            throw new Error(AuthService.notInitializedErrorMessage);
                        }
                        return [4 /*yield*/, this.remote.call("AuthService.login", email, password)];
                    case 1:
                        response = _a.sent();
                        this.storage.setItem("token", response.token);
                        return [2 /*return*/, response];
                }
            });
        });
    };
    /**
     * @method resetPassword
     * @description Sends a password reset token to a user's email.
     * @param {string} email - The user's email address.
     * @returns void. If the method did not throw, the operation was successful.
     * @throws {ErrorCode.INTERNAL_INCORRECT_CONFIGURATION} If the AuthService class was not properly configured.
     * @throws {ErrorCode.MISSING_EMAIL_PARAMETER} If no email was provided.
     * @throws {Error} If an unexpected error occurs.
     */
    AuthService.prototype.resetPassword = function (email) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.remote) {
                            if (this.serverSide) {
                                throw new Error(AuthService.notLoggedInErrorMessage);
                            }
                            throw new Error(AuthService.notInitializedErrorMessage);
                        }
                        return [4 /*yield*/, this.remote.call("AuthService.resetPassword", email)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * @method updateUserDetails
     * @description Updates the user's details.
     * @param {UpdateUserDetailsInput} input - An object containing the user's new details.
     * @returns {Promise<User>} An object containing the user's information.
     */
    AuthService.prototype.updateUserDetails = function (input) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.remote) {
                            if (this.serverSide) {
                                throw new Error(AuthService.notLoggedInErrorMessage);
                            }
                            throw new Error(AuthService.notInitializedErrorMessage);
                        }
                        return [4 /*yield*/, this.remote.call("AuthService.updateUserDetails", this.storage.getItem("token"), input)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * @method emailConfirmation
     * @description Confirms the user's email address. This method should be called after the user clicks on the link
     * received in the email.
     * @param {string} token - The token received in the email.
     * @returns void. If the method did not throw, the operation was successful.
     * @throws {ErrorCode.INTERNAL_INCORRECT_CONFIGURATION} If the AuthService class was not properly configured.
     * @throws {ErrorCode.INVALID_TOKEN} If the token is invalid.
     * @throws {Error} If an unexpected error occurs.
     */
    AuthService.prototype.emailConfirmation = function (token) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.remote) {
                            if (this.serverSide) {
                                throw new Error(AuthService.notLoggedInErrorMessage);
                            }
                            throw new Error(AuthService.notInitializedErrorMessage);
                        }
                        return [4 /*yield*/, this.remote.call("AuthService.emailConfirmation", token)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * @method resendEmailConfirmation
     * @description Resends the email confirmation email to the user.
     * @param {string} email
     * @returns void. If the method did not throw, the operation was successful.
     * @throws {ErrorCode.INTERNAL_INCORRECT_CONFIGURATION} If no email was provided.
     * @throws {ErrorCode.MAIL_NOT_SENT} If the email could not be sent.
     * @throws {Error} If an unexpected error occurs.
     */
    AuthService.prototype.resendEmailConfirmation = function (email) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.remote) {
                            if (this.serverSide) {
                                throw new Error(AuthService.notLoggedInErrorMessage);
                            }
                            throw new Error(AuthService.notInitializedErrorMessage);
                        }
                        return [4 /*yield*/, this.remote.call("AuthService.resendEmailConfirmation", email)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * @method resetPasswordConfirmation
     * @description Confirms the user's new password. This method should be called after the user clicks on the link
     * received in the email.
     * @param {string} token - The token received in the email.
     * @param {string} password - The new password.
     * @returns void. If the method did not throw, the operation was successful.
     * @throws {ErrorCode.INTERNAL_INCORRECT_CONFIGURATION} If the AuthService class was not properly configured.
     * @throws {ErrorCode.INVALID_TOKEN} If the token is invalid.
     * @throws {ErrorCode.PASSWORD_TOO_SHORT} If the password is too short.
     * @throws {ErrorCode.PASSWORD_CONTAINS_ONLY_NUMBERS} If the password contains only numbers.
     * @throws {ErrorCode.PASSWORD_MUST_HAVE_AT_LEAST_ONE_SPECIAL_CHARACTER} If the password does not contain any special characters.
     * @throws {ErrorCode.PASSWORD_MUST_HAVE_AT_LEAST_ONE_UPPERCASE_LETTER} If the password does not contain any uppercase letters.
     * @throws {Error} If an unexpected error occurs.
     */
    AuthService.prototype.resetPasswordConfirmation = function (token, password) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.remote) {
                            if (this.serverSide) {
                                throw new Error(AuthService.notLoggedInErrorMessage);
                            }
                            throw new Error(AuthService.notInitializedErrorMessage);
                        }
                        return [4 /*yield*/, this.remote.call("AuthService.resetPasswordConfirmation", token, password)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * @method googleRegistration
     * @description Method that can be used to obtain a login token for a giving user.
     *
     * @param {string} googleToken The user's Google token.
     * @returns {Promise<UserLoginResponse>} An object containing the user's information and the token.
     * @throws {ErrorCode.INVALID_TOKEN} If the Google token is incorrect.
     * @throws {Error} If an unexpected error occurs.
     */
    AuthService.prototype.googleRegistration = function (googleToken) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.remote || !this.storage) {
                            if (this.serverSide) {
                                throw new Error(AuthService.notLoggedInErrorMessage);
                            }
                            throw new Error(AuthService.notInitializedErrorMessage);
                        }
                        return [4 /*yield*/, this.remote.call("AuthService.googleRegistration", googleToken)];
                    case 1:
                        response = _a.sent();
                        this.storage.setItem("token", response.token);
                        return [2 /*return*/, response];
                }
            });
        });
    };
    /**
     * @method userInfo
     * @description Method that can be used to obtain information about the user. It uses the token retrieved from storage.
     * @returns {Promise<User>} An object containing the user's information.
     * @throws {ErrorCode.INTERNAL_INCORRECT_CONFIGURATION} If the AuthService class was not properly configured.
     * @throws {GenezioErrorCodes.Unauthorized} If the user is not authorized.
     * @throws {Error} If an unexpected error occurs.
     */
    AuthService.prototype.userInfo = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.remote || !this.storage) {
                            if (this.serverSide) {
                                throw new Error(AuthService.notLoggedInErrorMessage);
                            }
                            throw new Error(AuthService.notInitializedErrorMessage);
                        }
                        return [4 /*yield*/, this.remote.call("AuthService.userInfo", this.storage.getItem("token"))];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * @method userInfoForToken
     * @description Method that can be used to obtain information about the user.
     * @param {string} token The user's token.
     * @returns {Promise<User>} An object containing the user's information.
     * @throws {GenezioErrorCodes.Unauthorized} If the user is not authorized.
     * @throws {Error} If an unexpected error occurs.
     */
    AuthService.prototype.userInfoForToken = function (token) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.remote) {
                            if (this.serverSide) {
                                throw new Error(AuthService.notLoggedInErrorMessage);
                            }
                            throw new Error(AuthService.notInitializedErrorMessage);
                        }
                        return [4 /*yield*/, this.remote.call("AuthService.userInfo", token)];
                    case 1: return [2 /*return*/, _a.sent()];
                }
            });
        });
    };
    /**
     * @method logout
     * @description Method that can be used to logout the user. It removes the token from storage.
     * @returns void. If the method did not throw, the operation was successful.
     * @throws {ErrorCode.INTERNAL_INCORRECT_CONFIGURATION} If the AuthService class was not properly configured.
     * @throws {Error} If an unexpected error occurs.
     */
    AuthService.prototype.logout = function () {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                if (!this.storage) {
                    if (this.serverSide) {
                        throw new Error(AuthService.notLoggedInErrorMessage);
                    }
                    throw new Error(AuthService.notInitializedErrorMessage);
                }
                this.storage.removeItem("token");
                return [2 /*return*/];
            });
        });
    };
    /**
     * @method web3GetNonce
     * @description Method that can be used to obtain a nonce for a giving user.
     *
     * @param {string} address The user's address.
     * @returns {Promise<string>} A nonce.
     * @throws {ErrorCode.INTERNAL_INCORRECT_CONFIGURATION} If the AuthService class was not properly configured.
     * @throws {Error} If an unexpected error occurs.
     */
    AuthService.prototype.web3GetNonce = function (address) {
        return __awaiter(this, void 0, void 0, function () {
            return __generator(this, function (_a) {
                return [2 /*return*/, this.remote.call("AuthService.web3GetNonce", address)];
            });
        });
    };
    /**
      * @method web3Login
      * @description Method that can be used to obtain a login token for a giving user.
      * @param {string} address The user's address.
      * @param {string} signature The signature of the nonce.
      * @returns {Promise<UserLoginResponse>} An object containing the user's information and the token.
      */
    AuthService.prototype.web3Login = function (address, signature) {
        return __awaiter(this, void 0, void 0, function () {
            var response;
            return __generator(this, function (_a) {
                switch (_a.label) {
                    case 0:
                        if (!this.remote || !this.storage) {
                            if (this.serverSide) {
                                throw new Error(AuthService.notLoggedInErrorMessage);
                            }
                            throw new Error(AuthService.notInitializedErrorMessage);
                        }
                        return [4 /*yield*/, this.remote.call("AuthService.web3Login", address, signature)];
                    case 1:
                        response = _a.sent();
                        this.storage.setItem("token", response.token);
                        return [2 /*return*/, response];
                }
            });
        });
    };
    AuthService.notInitializedErrorMessage = "The AuthService class was not initialized. Call AuthService.getInstance().setTokenAndRegion(token, region) with the values provided in genezio dashboard. Check <link> for more information.";
    AuthService.notLoggedInErrorMessage = "You must be logged in to test the Auth Service locally. Please run 'genezio login' to test the Auth Service locally.";
    AuthService.instance = null;
    return AuthService;
}());
exports.AuthService = AuthService;
