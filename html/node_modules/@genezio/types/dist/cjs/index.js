"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.GenezioAuth = exports.GenezioMethod = exports.GenezioDeploy = exports.GenezioError = exports.GenezioErrorCodes = void 0;
const auth_1 = require("@genezio/auth");
var GenezioErrorCodes;
(function (GenezioErrorCodes) {
    GenezioErrorCodes[GenezioErrorCodes["BadRequest"] = 400] = "BadRequest";
    GenezioErrorCodes[GenezioErrorCodes["Unauthorized"] = 401] = "Unauthorized";
    GenezioErrorCodes[GenezioErrorCodes["PaymentRequired"] = 402] = "PaymentRequired";
    GenezioErrorCodes[GenezioErrorCodes["Forbidden"] = 403] = "Forbidden";
    GenezioErrorCodes[GenezioErrorCodes["NotFound"] = 404] = "NotFound";
    GenezioErrorCodes[GenezioErrorCodes["RequestTimeout"] = 408] = "RequestTimeout";
    GenezioErrorCodes[GenezioErrorCodes["PreconditionFailed"] = 412] = "PreconditionFailed";
})(GenezioErrorCodes || (exports.GenezioErrorCodes = GenezioErrorCodes = {}));
class GenezioError extends Error {
    constructor(message, code = undefined, info = undefined) {
        super(message);
        this.name = "GenezioError";
        this.code = code;
        this.info = info;
    }
}
exports.GenezioError = GenezioError;
// Decorator that marks that a class should be deployed using genezio.
function GenezioDeploy(_dict = {}) {
    return (value, _context) => {
        return value;
    };
}
exports.GenezioDeploy = GenezioDeploy;
// Decorator that marks that a method should be deployed using genezio.
function GenezioMethod(_dict = {}) {
    return function (value, _context) {
        return function (...args) {
            // @ts-expect-error
            const func = value.bind(this);
            const result = func(...args);
            return result;
        };
    };
}
exports.GenezioMethod = GenezioMethod;
function GenezioAuth() {
    return function (value, _context) {
        return async function (...args) {
            let response;
            try {
                auth_1.AuthService.getInstance().setServerSide(true);
                response = await auth_1.AuthService.getInstance().userInfoForToken(args[0].token);
            }
            catch (error) {
                if (error.code === auth_1.ErrorCode.INVALID_TOKEN) {
                    throw new GenezioError("Unauthorized", GenezioErrorCodes.Unauthorized);
                }
                else {
                    throw error;
                }
            }
            args[0].user = response;
            // @ts-expect-error
            const func = value.bind(this);
            const result = func(...args);
            return result;
        };
    };
}
exports.GenezioAuth = GenezioAuth;
