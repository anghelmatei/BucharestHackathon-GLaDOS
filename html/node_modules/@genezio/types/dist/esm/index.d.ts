export type GenezioDeployClassParameters = {
    type?: "jsonrpc" | "http" | "cron";
};
export declare enum GenezioErrorCodes {
    BadRequest = 400,
    Unauthorized = 401,
    PaymentRequired = 402,
    Forbidden = 403,
    NotFound = 404,
    RequestTimeout = 408,
    PreconditionFailed = 412
}
export declare class GenezioError extends Error {
    code: GenezioErrorCodes | number | undefined;
    info: {
        [id: string]: any;
    } | undefined;
    constructor(message: string, code?: GenezioErrorCodes | number | undefined, info?: {
        [id: string]: any;
    } | undefined);
}
export type GenezioDeployMethodParameters = {} | {
    type: "jsonrpc" | "http";
} | {
    type: "cron";
    cronString: string;
};
export declare function GenezioDeploy(_dict?: GenezioDeployClassParameters): (value: any, _context: any) => any;
export declare function GenezioMethod(_dict?: GenezioDeployMethodParameters): (value: Function, _context: any) => (...args: any[]) => any;
export declare function GenezioAuth(): (value: Function, _context: any) => (...args: any[]) => Promise<any>;
export type GenezioHttpRequest = {
    headers: {
        [key: string]: string;
    };
    http: {
        method: string;
        path: string;
        protocol: string;
        userAgent: string;
        sourceIp: string;
    };
    queryStringParameters?: {
        [key: string]: string;
    };
    timeEpoch: number;
    rawBody: string;
    body: any;
};
export type GenezioHttpResponse = {
    body: any;
    headers?: {
        [key: string]: string;
    };
    statusCode: string;
    isBase64Encoded?: boolean;
};
export type GnzContext = {
    token: string | undefined;
    user: {
        email: string;
        userId: string;
        authProvider: string;
        createdAt: Date;
        verified: boolean;
        name?: string;
        address?: string;
        profilePictureUrl?: string;
        customInfo?: {
            [key: string]: string;
        };
    } | undefined;
};
